import java.text.SimpleDateFormat

apply plugin:'java'
apply plugin:'application'
apply from: 'gradle/version.gradle'

mainClassName='site.kason.kailer.App'

tasks.withType(JavaCompile) {  
  options.encoding = "UTF-8"  
}

repositories {
  mavenCentral()
}

processResources {
    from("src/main/resources"){
        include 'default.properties'
        expand  version: project.version,
                buildtime: new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())
    }
}

dependencies {
  
    testCompile 'junit:junit:4.12'
    compile 'commons-cli:commons-cli:1.3.1'
    compile 'com.sun.mail:javax.mail:1.5.4'
    compile 'commons-io:commons-io:2.5'
    compile 'com.google.code.findbugs:jsr305:3.0.1'
    compile 'site.kason.kalang:kalang-runtime:1.4.1'
}



//## gradle plugin for kalang
apply plugin:'java'
sourceSets.main.allSource.srcDir("src/main/kalang")
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'site.kason.kalang:kalang-compiler:1.4.1'
  }
}

import kalang.compiler.shell.Kalangc;
class kalang implements Plugin<Project> {
    void cpKalang(project){
        def klSrc = new File(project.projectDir,"src/main/kalang")
        def outDir = new File(project.projectDir,"build/classes/kalang/main")
        //println "use src dir:" + klSrc.getAbsolutePath();
        //println "use out dir:" + outDir.getAbsolutePath();
        if(klSrc.exists()){
            List<String> cps = new LinkedList();
            for(f in project.configurations.compile.files){
                cps.add(f.getAbsolutePath());
            }
            String cp = String.join(";",cps);
            //println("class path:" + cp);
            def args = ["--output-dir",outDir.getAbsolutePath(),"--classpath",cp,klSrc.getAbsolutePath()];
            //println("compile args:" + args);
            int result = new Kalangc().run(args as String[])
            if (result!=0){
                throw new Exception("compile failed with exit code:${result}");
            }
        }
    }
    void apply(Project project) {
        project.task('compileKalang').doLast{
            cpKalang(project);
        }
    }
}
apply plugin:kalang
compileJava.dependsOn compileKalang

jar {
  from "$buildDir/classes/kalang/main"
}